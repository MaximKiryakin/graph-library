Библиотека graph_lib
Основные функции:

1) du_grapx() - создание графа.
struct Graph* du_grapx();
Функция возвращает указатель на структуру-граф
Поля структуры:
names - поле имен вершин(то, как вершину назвал пользователь)
matrix - матрица смежности графа. В ее клетках, в случае наличия ребра, стоит 
его вес. Номер строки - индекс первой вершины, столбца - второй.
current_size - текущая размерность матрицы.

2) deleteGraph - функция удаления графа.
void del_graph(struct Graph* an);
Принимает указатель на структуру-граф и уничтожает его, освобождая всю занимаемую
им память.

3) add_vertex - функция добавления вершины.
int add_vertex(struct Graph* a, int name);
a - структура - граф; name - имя вершины.

4) add_edge - функция добавления ребра.
int add_edge(struct Graph* a,int name1, int name2, int weight, int both);
a - граф, name1 - имя первой вершины. name2 - имя второй вершины. weight
 - вес (положительное число). both - параметр, принимающий два значения:
1 - создать ребро в двух направлениях, 0 - создастся ребро name1 -> name2.
В случае если вершины нет добавления не происходит, выводится предупреждение.

5) del_edge - функция удаления ребра.
int del_edge(struct Graph* a,int name1, int name2);
Параметры: a - структура-граф, name1, name2 - вершины, между которыми
надо удалить ребро. В случае если ребра нет добавления не происходит, выводится 
предупреждение.

6) del_node - удаление вершины.
int del_node(struct Graph* a,int name1);
Функция принимает структуру- граф и имя вершины. Производит удаление вершины 
из графа. Если вершины нет - предупреждение.

7) deikstra Алгоритм Дейкстры.
int* deikstra(struct Graph* a, int name1, int name2);
Параметры: a - структура-граф, name1, name2 - имена вершин, между которыми 
ищется кратчайший путь (имеется в виду по весу). Возвращаемое значение -
массив элементов типа int, первый элемент которого - длина массива. Предпо-
лагается, что путь найдется.

8) print_matrix - функция печати матрицы смежности.
void print_matrix(struct Graph* gr2);
Параметры: структура-граф. Вывод: печать матрицы смежности в консоль, печать 
имен переменных.

9) warshall - алгоритм Уоршелла.
struct Graph* warshall(struct Graph* initial); 
Параметры - структура-граф. Возвращаемое значение - структура-граф.
Суть алгоритма: производится транзитивное замыкание отношения на множестве
вершин. То есть, проще говоря, матрица смежности возвращаемого графа 
показывает, если ли путь из вершины a в вершину b.

Задача, которая рашалась с использованием библиотеки:
Постановка задачи:
Необходимо найти все вершины графа, которые лежат в цикле.
То есть, выйдя из вершины есть возможность в нее вернуться.
Из всех этих вершин, надо выбрать две: с максимальным и минимальным номером и
найти кратчайшее расстояние между ними. Веса ребер графа строго положительны.
Граф ориентированный. Гарантируется, что такие две вершины найдутся.

Как происходит считывание графа.
В текстовом файле задаются параметры.
1 число - число вершин.
дальше четверки чисел: имя1 имя2 вес направление.
Важно: нумерация вершин в файле идет от единицы.
Соответвенно и в функцию Дейкстры надо передавать имена, начиная с 1.
При считывании они автоматически генерируются 1...n.

Сборка:
make - сборка программы, решающей задачу. Результат файл solution
make test - сборка программы, демонстрирующей работу функций библиотеки
Результат таботы файл test
make clen - очистка всех бинарных файлов


